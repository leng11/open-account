/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.HazMatHazMatChemicalRecord;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Container to hold HazMat information.  Applies only if SubVersion is greater than or equal to 1701.
 */
@ApiModel(description = "Container to hold HazMat information.  Applies only if SubVersion is greater than or equal to 1701.")
@JsonPropertyOrder({
  PackageServiceOptionsHazMat.JSON_PROPERTY_PACKAGE_IDENTIFIER,
  PackageServiceOptionsHazMat.JSON_PROPERTY_QVALUE,
  PackageServiceOptionsHazMat.JSON_PROPERTY_OVER_PACKED_INDICATOR,
  PackageServiceOptionsHazMat.JSON_PROPERTY_ALL_PACKED_IN_ONE_INDICATOR,
  PackageServiceOptionsHazMat.JSON_PROPERTY_HAZ_MAT_CHEMICAL_RECORD
})
@JsonTypeName("PackageServiceOptions_HazMat")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class PackageServiceOptionsHazMat {
  public static final String JSON_PROPERTY_PACKAGE_IDENTIFIER = "PackageIdentifier";
  private String packageIdentifier;

  public static final String JSON_PROPERTY_QVALUE = "QValue";
  private String qvalue;

  public static final String JSON_PROPERTY_OVER_PACKED_INDICATOR = "OverPackedIndicator";
  private String overPackedIndicator;

  public static final String JSON_PROPERTY_ALL_PACKED_IN_ONE_INDICATOR = "AllPackedInOneIndicator";
  private String allPackedInOneIndicator;

  public static final String JSON_PROPERTY_HAZ_MAT_CHEMICAL_RECORD = "HazMatChemicalRecord";
  private HazMatHazMatChemicalRecord hazMatChemicalRecord;

  public PackageServiceOptionsHazMat() {
  }

  public PackageServiceOptionsHazMat packageIdentifier(String packageIdentifier) {
    
    this.packageIdentifier = packageIdentifier;
    return this;
  }

   /**
   * Identifies the package containing Dangerous Goods.  Required if SubVersion is greater than or equal to 1701.
   * @return packageIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the package containing Dangerous Goods.  Required if SubVersion is greater than or equal to 1701.")
  @JsonProperty(JSON_PROPERTY_PACKAGE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPackageIdentifier() {
    return packageIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_PACKAGE_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPackageIdentifier(String packageIdentifier) {
    this.packageIdentifier = packageIdentifier;
  }


  public PackageServiceOptionsHazMat qvalue(String qvalue) {
    
    this.qvalue = qvalue;
    return this;
  }

   /**
   * QValue is required when a HazMat shipment specifies AllPackedInOneIndicator and the regulation set for that shipment is IATA.   Applies only if SubVersion is greater than or equal to 1701. Valid values are : 0.1; 0.2; 0.3; 0.4; 0.5; 0.6; 0.7; 0.8; 0.9; 1.0
   * @return qvalue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QValue is required when a HazMat shipment specifies AllPackedInOneIndicator and the regulation set for that shipment is IATA.   Applies only if SubVersion is greater than or equal to 1701. Valid values are : 0.1; 0.2; 0.3; 0.4; 0.5; 0.6; 0.7; 0.8; 0.9; 1.0")
  @JsonProperty(JSON_PROPERTY_QVALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQvalue() {
    return qvalue;
  }


  @JsonProperty(JSON_PROPERTY_QVALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQvalue(String qvalue) {
    this.qvalue = qvalue;
  }


  public PackageServiceOptionsHazMat overPackedIndicator(String overPackedIndicator) {
    
    this.overPackedIndicator = overPackedIndicator;
    return this;
  }

   /**
   * Presence/Absence Indicator. Any value is ignored. Presence indicates that shipment is overpack.  Applies only if SubVersion is greater than or equal to 1701.
   * @return overPackedIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Presence/Absence Indicator. Any value is ignored. Presence indicates that shipment is overpack.  Applies only if SubVersion is greater than or equal to 1701.")
  @JsonProperty(JSON_PROPERTY_OVER_PACKED_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOverPackedIndicator() {
    return overPackedIndicator;
  }


  @JsonProperty(JSON_PROPERTY_OVER_PACKED_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOverPackedIndicator(String overPackedIndicator) {
    this.overPackedIndicator = overPackedIndicator;
  }


  public PackageServiceOptionsHazMat allPackedInOneIndicator(String allPackedInOneIndicator) {
    
    this.allPackedInOneIndicator = allPackedInOneIndicator;
    return this;
  }

   /**
   * Presence/Absence Indicator. Any value is ignored. Indicates the hazmat shipment/package is all packed in one.  Applies only if SubVersion is greater than or equal to 1701.
   * @return allPackedInOneIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Presence/Absence Indicator. Any value is ignored. Indicates the hazmat shipment/package is all packed in one.  Applies only if SubVersion is greater than or equal to 1701.")
  @JsonProperty(JSON_PROPERTY_ALL_PACKED_IN_ONE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAllPackedInOneIndicator() {
    return allPackedInOneIndicator;
  }


  @JsonProperty(JSON_PROPERTY_ALL_PACKED_IN_ONE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllPackedInOneIndicator(String allPackedInOneIndicator) {
    this.allPackedInOneIndicator = allPackedInOneIndicator;
  }


  public PackageServiceOptionsHazMat hazMatChemicalRecord(HazMatHazMatChemicalRecord hazMatChemicalRecord) {
    
    this.hazMatChemicalRecord = hazMatChemicalRecord;
    return this;
  }

   /**
   * Get hazMatChemicalRecord
   * @return hazMatChemicalRecord
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_HAZ_MAT_CHEMICAL_RECORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public HazMatHazMatChemicalRecord getHazMatChemicalRecord() {
    return hazMatChemicalRecord;
  }


  @JsonProperty(JSON_PROPERTY_HAZ_MAT_CHEMICAL_RECORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHazMatChemicalRecord(HazMatHazMatChemicalRecord hazMatChemicalRecord) {
    this.hazMatChemicalRecord = hazMatChemicalRecord;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageServiceOptionsHazMat packageServiceOptionsHazMat = (PackageServiceOptionsHazMat) o;
    return Objects.equals(this.packageIdentifier, packageServiceOptionsHazMat.packageIdentifier) &&
        Objects.equals(this.qvalue, packageServiceOptionsHazMat.qvalue) &&
        Objects.equals(this.overPackedIndicator, packageServiceOptionsHazMat.overPackedIndicator) &&
        Objects.equals(this.allPackedInOneIndicator, packageServiceOptionsHazMat.allPackedInOneIndicator) &&
        Objects.equals(this.hazMatChemicalRecord, packageServiceOptionsHazMat.hazMatChemicalRecord);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageIdentifier, qvalue, overPackedIndicator, allPackedInOneIndicator, hazMatChemicalRecord);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageServiceOptionsHazMat {\n");
    sb.append("    packageIdentifier: ").append(toIndentedString(packageIdentifier)).append("\n");
    sb.append("    qvalue: ").append(toIndentedString(qvalue)).append("\n");
    sb.append("    overPackedIndicator: ").append(toIndentedString(overPackedIndicator)).append("\n");
    sb.append("    allPackedInOneIndicator: ").append(toIndentedString(allPackedInOneIndicator)).append("\n");
    sb.append("    hazMatChemicalRecord: ").append(toIndentedString(hazMatChemicalRecord)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

