/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.DimensionsUnitOfMeasurement;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Dimension of the HandlingUnit container for density based pricing.
 */
@ApiModel(description = "Dimension of the HandlingUnit container for density based pricing.")
@JsonPropertyOrder({
  HandlingUnitsDimensions.JSON_PROPERTY_UNIT_OF_MEASUREMENT,
  HandlingUnitsDimensions.JSON_PROPERTY_LENGTH,
  HandlingUnitsDimensions.JSON_PROPERTY_WIDTH,
  HandlingUnitsDimensions.JSON_PROPERTY_HEIGHT
})
@JsonTypeName("HandlingUnits_Dimensions")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class HandlingUnitsDimensions {
  public static final String JSON_PROPERTY_UNIT_OF_MEASUREMENT = "UnitOfMeasurement";
  private DimensionsUnitOfMeasurement unitOfMeasurement;

  public static final String JSON_PROPERTY_LENGTH = "Length";
  private String length;

  public static final String JSON_PROPERTY_WIDTH = "Width";
  private String width;

  public static final String JSON_PROPERTY_HEIGHT = "Height";
  private String height;

  public HandlingUnitsDimensions() {
  }

  public HandlingUnitsDimensions unitOfMeasurement(DimensionsUnitOfMeasurement unitOfMeasurement) {
    
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

   /**
   * Get unitOfMeasurement
   * @return unitOfMeasurement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DimensionsUnitOfMeasurement getUnitOfMeasurement() {
    return unitOfMeasurement;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitOfMeasurement(DimensionsUnitOfMeasurement unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
  }


  public HandlingUnitsDimensions length(String length) {
    
    this.length = length;
    return this;
  }

   /**
   * The length of the line item used to determine dimensional weight.
   * @return length
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The length of the line item used to determine dimensional weight.")
  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLength() {
    return length;
  }


  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLength(String length) {
    this.length = length;
  }


  public HandlingUnitsDimensions width(String width) {
    
    this.width = width;
    return this;
  }

   /**
   * The width of the line item used to determine dimensional weight.
   * @return width
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The width of the line item used to determine dimensional weight.")
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWidth(String width) {
    this.width = width;
  }


  public HandlingUnitsDimensions height(String height) {
    
    this.height = height;
    return this;
  }

   /**
   * The height of the line item used to determine dimensional weight.
   * @return height
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The height of the line item used to determine dimensional weight.")
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeight(String height) {
    this.height = height;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HandlingUnitsDimensions handlingUnitsDimensions = (HandlingUnitsDimensions) o;
    return Objects.equals(this.unitOfMeasurement, handlingUnitsDimensions.unitOfMeasurement) &&
        Objects.equals(this.length, handlingUnitsDimensions.length) &&
        Objects.equals(this.width, handlingUnitsDimensions.width) &&
        Objects.equals(this.height, handlingUnitsDimensions.height);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitOfMeasurement, length, width, height);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HandlingUnitsDimensions {\n");
    sb.append("    unitOfMeasurement: ").append(toIndentedString(unitOfMeasurement)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

