/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.AdjustedHeightUnitOfMeasurement;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Container to hold Adjusted Height information.
 */
@ApiModel(description = "Container to hold Adjusted Height information.")
@JsonPropertyOrder({
  HandlingUnitsAdjustedHeight.JSON_PROPERTY_VALUE,
  HandlingUnitsAdjustedHeight.JSON_PROPERTY_UNIT_OF_MEASUREMENT
})
@JsonTypeName("HandlingUnits_AdjustedHeight")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class HandlingUnitsAdjustedHeight {
  public static final String JSON_PROPERTY_VALUE = "Value";
  private String value;

  public static final String JSON_PROPERTY_UNIT_OF_MEASUREMENT = "UnitOfMeasurement";
  private AdjustedHeightUnitOfMeasurement unitOfMeasurement;

  public HandlingUnitsAdjustedHeight() {
  }

  public HandlingUnitsAdjustedHeight value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Adjusted Height value for the handling unit.  Adjusted Height is done only when Handling unit type is SKD &#x3D; Skid or PLT &#x3D; Pallet.
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Adjusted Height value for the handling unit.  Adjusted Height is done only when Handling unit type is SKD = Skid or PLT = Pallet.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(String value) {
    this.value = value;
  }


  public HandlingUnitsAdjustedHeight unitOfMeasurement(AdjustedHeightUnitOfMeasurement unitOfMeasurement) {
    
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

   /**
   * Get unitOfMeasurement
   * @return unitOfMeasurement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AdjustedHeightUnitOfMeasurement getUnitOfMeasurement() {
    return unitOfMeasurement;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitOfMeasurement(AdjustedHeightUnitOfMeasurement unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HandlingUnitsAdjustedHeight handlingUnitsAdjustedHeight = (HandlingUnitsAdjustedHeight) o;
    return Objects.equals(this.value, handlingUnitsAdjustedHeight.value) &&
        Objects.equals(this.unitOfMeasurement, handlingUnitsAdjustedHeight.unitOfMeasurement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, unitOfMeasurement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HandlingUnitsAdjustedHeight {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    unitOfMeasurement: ").append(toIndentedString(unitOfMeasurement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

