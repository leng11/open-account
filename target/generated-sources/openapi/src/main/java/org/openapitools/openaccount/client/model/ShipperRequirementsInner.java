/*
 * UPS Accounts API
 * UPS Open Account API enables UPS 3rd Party Vendors to request a UPS Shipper Account. If the UPS Shipper Account request is approved, an UPS Shipper Account Number is generated. The UPS Ready Vendor user should first complete the registration process and get a My UPS ID before requesting a Shipper Account. Addresses are validated for accuracy. The User is expected to provide the primary reason for requesting a Shipper Account and the estimated number of Packages to be shipped.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.openaccount.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ShipperRequirementsInner
 */
@JsonPropertyOrder({
  ShipperRequirementsInner.JSON_PROPERTY_TYPE,
  ShipperRequirementsInner.JSON_PROPERTY_ANSWER,
  ShipperRequirementsInner.JSON_PROPERTY_LICENSE_IN_ALL_STATES
})
@JsonTypeName("shipperRequirements_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-16T16:23:57.675426900-05:00[America/New_York]")
public class ShipperRequirementsInner {
  /**
   * 01 &#x3D; Prescription to Patients 02 &#x3D; Online or Mail Order Pharmacy 03 &#x3D; Hazardous Materials 04 &#x3D; Lithium Batteries 05 &#x3D; Firearms 06 &#x3D; Ammunition 07 &#x3D; Alcoholic Beverages 08 &#x3D; Tobacco
   */
  public enum TypeEnum {
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _04("04"),
    
    _05("05"),
    
    _06("06"),
    
    _07("07"),
    
    _08("08");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_ANSWER = "answer";
  private Boolean answer;

  public static final String JSON_PROPERTY_LICENSE_IN_ALL_STATES = "licenseInAllStates";
  private Boolean licenseInAllStates;

  public ShipperRequirementsInner() {
  }

  public ShipperRequirementsInner type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * 01 &#x3D; Prescription to Patients 02 &#x3D; Online or Mail Order Pharmacy 03 &#x3D; Hazardous Materials 04 &#x3D; Lithium Batteries 05 &#x3D; Firearms 06 &#x3D; Ammunition 07 &#x3D; Alcoholic Beverages 08 &#x3D; Tobacco
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01", value = "01 = Prescription to Patients 02 = Online or Mail Order Pharmacy 03 = Hazardous Materials 04 = Lithium Batteries 05 = Firearms 06 = Ammunition 07 = Alcoholic Beverages 08 = Tobacco")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ShipperRequirementsInner answer(Boolean answer) {
    
    this.answer = answer;
    return this;
  }

   /**
   * Get answer
   * @return answer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAnswer() {
    return answer;
  }


  @JsonProperty(JSON_PROPERTY_ANSWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnswer(Boolean answer) {
    this.answer = answer;
  }


  public ShipperRequirementsInner licenseInAllStates(Boolean licenseInAllStates) {
    
    this.licenseInAllStates = licenseInAllStates;
    return this;
  }

   /**
   * Get licenseInAllStates
   * @return licenseInAllStates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LICENSE_IN_ALL_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLicenseInAllStates() {
    return licenseInAllStates;
  }


  @JsonProperty(JSON_PROPERTY_LICENSE_IN_ALL_STATES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLicenseInAllStates(Boolean licenseInAllStates) {
    this.licenseInAllStates = licenseInAllStates;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipperRequirementsInner shipperRequirementsInner = (ShipperRequirementsInner) o;
    return Objects.equals(this.type, shipperRequirementsInner.type) &&
        Objects.equals(this.answer, shipperRequirementsInner.answer) &&
        Objects.equals(this.licenseInAllStates, shipperRequirementsInner.licenseInAllStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, answer, licenseInAllStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipperRequirementsInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    licenseInAllStates: ").append(toIndentedString(licenseInAllStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

