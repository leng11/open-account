/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.CommodityNMFC;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Commodity Container.  Required only for GFP rating when FRSShipmentIndicator is requested.
 */
@ApiModel(description = "Commodity Container.  Required only for GFP rating when FRSShipmentIndicator is requested.")
@JsonPropertyOrder({
  PackageCommodity.JSON_PROPERTY_FREIGHT_CLASS,
  PackageCommodity.JSON_PROPERTY_N_M_F_C
})
@JsonTypeName("Package_Commodity")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class PackageCommodity {
  public static final String JSON_PROPERTY_FREIGHT_CLASS = "FreightClass";
  private String freightClass;

  public static final String JSON_PROPERTY_N_M_F_C = "NMFC";
  private CommodityNMFC NMFC;

  public PackageCommodity() {
  }

  public PackageCommodity freightClass(String freightClass) {
    
    this.freightClass = freightClass;
    return this;
  }

   /**
   * Freight Classification. Freight class partially determines the freight rate for the article.  See Appendix of the Rating Ground Freight Web Services Developers Guide for list of Freight classes. For GFP Only.
   * @return freightClass
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Freight Classification. Freight class partially determines the freight rate for the article.  See Appendix of the Rating Ground Freight Web Services Developers Guide for list of Freight classes. For GFP Only.")
  @JsonProperty(JSON_PROPERTY_FREIGHT_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFreightClass() {
    return freightClass;
  }


  @JsonProperty(JSON_PROPERTY_FREIGHT_CLASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFreightClass(String freightClass) {
    this.freightClass = freightClass;
  }


  public PackageCommodity NMFC(CommodityNMFC NMFC) {
    
    this.NMFC = NMFC;
    return this;
  }

   /**
   * Get NMFC
   * @return NMFC
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_N_M_F_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CommodityNMFC getNMFC() {
    return NMFC;
  }


  @JsonProperty(JSON_PROPERTY_N_M_F_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNMFC(CommodityNMFC NMFC) {
    this.NMFC = NMFC;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageCommodity packageCommodity = (PackageCommodity) o;
    return Objects.equals(this.freightClass, packageCommodity.freightClass) &&
        Objects.equals(this.NMFC, packageCommodity.NMFC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freightClass, NMFC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageCommodity {\n");
    sb.append("    freightClass: ").append(toIndentedString(freightClass)).append("\n");
    sb.append("    NMFC: ").append(toIndentedString(NMFC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

