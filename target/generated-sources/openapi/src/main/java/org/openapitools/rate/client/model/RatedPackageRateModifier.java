/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Container for returned Rate Modifier information. Applies only if SubVersion is 2205 or greater.
 */
@ApiModel(description = "Container for returned Rate Modifier information. Applies only if SubVersion is 2205 or greater.")
@JsonPropertyOrder({
  RatedPackageRateModifier.JSON_PROPERTY_MODIFIER_TYPE,
  RatedPackageRateModifier.JSON_PROPERTY_MODIFIER_DESC,
  RatedPackageRateModifier.JSON_PROPERTY_CURRENCY_CODE,
  RatedPackageRateModifier.JSON_PROPERTY_AMOUNT
})
@JsonTypeName("RatedPackage_RateModifier")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class RatedPackageRateModifier {
  public static final String JSON_PROPERTY_MODIFIER_TYPE = "ModifierType";
  private String modifierType;

  public static final String JSON_PROPERTY_MODIFIER_DESC = "ModifierDesc";
  private String modifierDesc;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "CurrencyCode";
  private String currencyCode;

  public static final String JSON_PROPERTY_AMOUNT = "Amount";
  private String amount;

  public RatedPackageRateModifier() {
  }

  public RatedPackageRateModifier modifierType(String modifierType) {
    
    this.modifierType = modifierType;
    return this;
  }

   /**
   * Rate Modifier Type. Example: \&quot;ORM\&quot;. Applies only if SubVersion is 2205 or greater.
   * @return modifierType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Rate Modifier Type. Example: \"ORM\". Applies only if SubVersion is 2205 or greater.")
  @JsonProperty(JSON_PROPERTY_MODIFIER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifierType() {
    return modifierType;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIER_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifierType(String modifierType) {
    this.modifierType = modifierType;
  }


  public RatedPackageRateModifier modifierDesc(String modifierDesc) {
    
    this.modifierDesc = modifierDesc;
    return this;
  }

   /**
   * Rate Modifier Description. Example: \&quot;Origin Modifier\&quot;. Applies only if SubVersion is 2205 or greater.
   * @return modifierDesc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Rate Modifier Description. Example: \"Origin Modifier\". Applies only if SubVersion is 2205 or greater.")
  @JsonProperty(JSON_PROPERTY_MODIFIER_DESC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifierDesc() {
    return modifierDesc;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIER_DESC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifierDesc(String modifierDesc) {
    this.modifierDesc = modifierDesc;
  }


  public RatedPackageRateModifier currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Rate Currency Code. Example: \&quot;USD\&quot;
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Rate Currency Code. Example: \"USD\"")
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrencyCode() {
    return currencyCode;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public RatedPackageRateModifier amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount. Example: \&quot;-1.00\&quot;,\&quot;0.25\&quot;. It contains positive or negative values. Applies only if SubVersion is 2205 or greater.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Amount. Example: \"-1.00\",\"0.25\". It contains positive or negative values. Applies only if SubVersion is 2205 or greater.")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(String amount) {
    this.amount = amount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatedPackageRateModifier ratedPackageRateModifier = (RatedPackageRateModifier) o;
    return Objects.equals(this.modifierType, ratedPackageRateModifier.modifierType) &&
        Objects.equals(this.modifierDesc, ratedPackageRateModifier.modifierDesc) &&
        Objects.equals(this.currencyCode, ratedPackageRateModifier.currencyCode) &&
        Objects.equals(this.amount, ratedPackageRateModifier.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modifierType, modifierDesc, currencyCode, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatedPackageRateModifier {\n");
    sb.append("    modifierType: ").append(toIndentedString(modifierType)).append("\n");
    sb.append("    modifierDesc: ").append(toIndentedString(modifierDesc)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

