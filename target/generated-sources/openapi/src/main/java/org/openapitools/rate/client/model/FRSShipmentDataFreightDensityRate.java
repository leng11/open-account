/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FreightDensityRate container for Density based rating.
 */
@ApiModel(description = "FreightDensityRate container for Density based rating.")
@JsonPropertyOrder({
  FRSShipmentDataFreightDensityRate.JSON_PROPERTY_DENSITY,
  FRSShipmentDataFreightDensityRate.JSON_PROPERTY_TOTAL_CUBIC_FEET
})
@JsonTypeName("FRSShipmentData_FreightDensityRate")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class FRSShipmentDataFreightDensityRate {
  public static final String JSON_PROPERTY_DENSITY = "Density";
  private String density;

  public static final String JSON_PROPERTY_TOTAL_CUBIC_FEET = "TotalCubicFeet";
  private String totalCubicFeet;

  public FRSShipmentDataFreightDensityRate() {
  }

  public FRSShipmentDataFreightDensityRate density(String density) {
    
    this.density = density;
    return this;
  }

   /**
   * Density is returned if the Shipper is eligible for Density based rate.  Valid values:0 to 999.9
   * @return density
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Density is returned if the Shipper is eligible for Density based rate.  Valid values:0 to 999.9")
  @JsonProperty(JSON_PROPERTY_DENSITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDensity() {
    return density;
  }


  @JsonProperty(JSON_PROPERTY_DENSITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDensity(String density) {
    this.density = density;
  }


  public FRSShipmentDataFreightDensityRate totalCubicFeet(String totalCubicFeet) {
    
    this.totalCubicFeet = totalCubicFeet;
    return this;
  }

   /**
   * TotalCubic feet is returned if the Shipper is eligible for Density based rate.  Valid values:0 to 99999.999
   * @return totalCubicFeet
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "TotalCubic feet is returned if the Shipper is eligible for Density based rate.  Valid values:0 to 99999.999")
  @JsonProperty(JSON_PROPERTY_TOTAL_CUBIC_FEET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTotalCubicFeet() {
    return totalCubicFeet;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_CUBIC_FEET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalCubicFeet(String totalCubicFeet) {
    this.totalCubicFeet = totalCubicFeet;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FRSShipmentDataFreightDensityRate frSShipmentDataFreightDensityRate = (FRSShipmentDataFreightDensityRate) o;
    return Objects.equals(this.density, frSShipmentDataFreightDensityRate.density) &&
        Objects.equals(this.totalCubicFeet, frSShipmentDataFreightDensityRate.totalCubicFeet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(density, totalCubicFeet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FRSShipmentDataFreightDensityRate {\n");
    sb.append("    density: ").append(toIndentedString(density)).append("\n");
    sb.append("    totalCubicFeet: ").append(toIndentedString(totalCubicFeet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

