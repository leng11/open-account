/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.DimWeightUnitOfMeasurement;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Package Dimensional Weight container. Values in this container are ignored when package dimensions are provided. Please visit ups.com for instructions on calculating this value.  Only used for non-US/CA/PR shipments.
 */
@ApiModel(description = "Package Dimensional Weight container. Values in this container are ignored when package dimensions are provided. Please visit ups.com for instructions on calculating this value.  Only used for non-US/CA/PR shipments.")
@JsonPropertyOrder({
  PackageDimWeight.JSON_PROPERTY_UNIT_OF_MEASUREMENT,
  PackageDimWeight.JSON_PROPERTY_WEIGHT
})
@JsonTypeName("Package_DimWeight")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class PackageDimWeight {
  public static final String JSON_PROPERTY_UNIT_OF_MEASUREMENT = "UnitOfMeasurement";
  private DimWeightUnitOfMeasurement unitOfMeasurement;

  public static final String JSON_PROPERTY_WEIGHT = "Weight";
  private String weight;

  public PackageDimWeight() {
  }

  public PackageDimWeight unitOfMeasurement(DimWeightUnitOfMeasurement unitOfMeasurement) {
    
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

   /**
   * Get unitOfMeasurement
   * @return unitOfMeasurement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DimWeightUnitOfMeasurement getUnitOfMeasurement() {
    return unitOfMeasurement;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitOfMeasurement(DimWeightUnitOfMeasurement unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
  }


  public PackageDimWeight weight(String weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * Dimensional weight of the package. Decimal values are not accepted, however there is one implied decimal place for values in this field (i.e. 115 &#x3D; 11.5).
   * @return weight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dimensional weight of the package. Decimal values are not accepted, however there is one implied decimal place for values in this field (i.e. 115 = 11.5).")
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(String weight) {
    this.weight = weight;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageDimWeight packageDimWeight = (PackageDimWeight) o;
    return Objects.equals(this.unitOfMeasurement, packageDimWeight.unitOfMeasurement) &&
        Objects.equals(this.weight, packageDimWeight.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitOfMeasurement, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageDimWeight {\n");
    sb.append("    unitOfMeasurement: ").append(toIndentedString(unitOfMeasurement)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

