/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.DryIceWeightUnitOfMeasurement;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Container for Weight information for Dry Ice.
 */
@ApiModel(description = "Container for Weight information for Dry Ice.")
@JsonPropertyOrder({
  DryIceDryIceWeight.JSON_PROPERTY_UNIT_OF_MEASUREMENT,
  DryIceDryIceWeight.JSON_PROPERTY_WEIGHT
})
@JsonTypeName("DryIce_DryIceWeight")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class DryIceDryIceWeight {
  public static final String JSON_PROPERTY_UNIT_OF_MEASUREMENT = "UnitOfMeasurement";
  private DryIceWeightUnitOfMeasurement unitOfMeasurement;

  public static final String JSON_PROPERTY_WEIGHT = "Weight";
  private String weight;

  public DryIceDryIceWeight() {
  }

  public DryIceDryIceWeight unitOfMeasurement(DryIceWeightUnitOfMeasurement unitOfMeasurement) {
    
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

   /**
   * Get unitOfMeasurement
   * @return unitOfMeasurement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public DryIceWeightUnitOfMeasurement getUnitOfMeasurement() {
    return unitOfMeasurement;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASUREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnitOfMeasurement(DryIceWeightUnitOfMeasurement unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
  }


  public DryIceDryIceWeight weight(String weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * Weight for Dry Ice.  Cannot be more than package weight.  Should be more than 0.0.  Valid characters are 0-9 and \&quot;.\&quot; (Decimal point).  Limit to 1 digit after the decimal.  The maximum length of the field is 5 including \&quot;.\&quot; and can hold up to 1 decimal place.
   * @return weight
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Weight for Dry Ice.  Cannot be more than package weight.  Should be more than 0.0.  Valid characters are 0-9 and \".\" (Decimal point).  Limit to 1 digit after the decimal.  The maximum length of the field is 5 including \".\" and can hold up to 1 decimal place.")
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeight(String weight) {
    this.weight = weight;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DryIceDryIceWeight dryIceDryIceWeight = (DryIceDryIceWeight) o;
    return Objects.equals(this.unitOfMeasurement, dryIceDryIceWeight.unitOfMeasurement) &&
        Objects.equals(this.weight, dryIceDryIceWeight.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unitOfMeasurement, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DryIceDryIceWeight {\n");
    sb.append("    unitOfMeasurement: ").append(toIndentedString(unitOfMeasurement)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

