/*
 * UPS Accounts API
 * UPS Open Account API enables UPS 3rd Party Vendors to request a UPS Shipper Account. If the UPS Shipper Account request is approved, an UPS Shipper Account Number is generated. The UPS Ready Vendor user should first complete the registration process and get a My UPS ID before requesting a Shipper Account. Addresses are validated for accuracy. The User is expected to provide the primary reason for requesting a Shipper Account and the estimated number of Packages to be shipped.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.openaccount.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.openaccount.client.model.BusinessInformationImportBrokerage;
import org.openapitools.openaccount.client.model.ShipmentInformation;
import org.openapitools.openaccount.client.model.ShipperRequirementsInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BusinessInformation
 */
@JsonPropertyOrder({
  BusinessInformation.JSON_PROPERTY_INDUSTRY,
  BusinessInformation.JSON_PROPERTY_NUMBER_OF_EMPLOYEES,
  BusinessInformation.JSON_PROPERTY_SHIPMENT_INFORMATION,
  BusinessInformation.JSON_PROPERTY_SHIPPER_REQUIREMENTS,
  BusinessInformation.JSON_PROPERTY_IMPORT_BROKERAGE
})
@JsonTypeName("businessInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-09T11:49:46.244314200-05:00[America/New_York]")
public class BusinessInformation {
  /**
   * 2000 &#x3D; Automotive 3000 &#x3D; High Tech 4000 &#x3D; Industrial Manufacturing &amp; Distribution 5000 &#x3D; Retail and Consumer Goods 6000 &#x3D; Professional Services 7000 &#x3D; Consumer Services 8000 &#x3D; Healthcare 9000 &#x3D; Government 9900 &#x3D; Other
   */
  public enum IndustryEnum {
    _2000("2000"),
    
    _3000("3000"),
    
    _4000("4000"),
    
    _5000("5000"),
    
    _6000("6000"),
    
    _7000("7000"),
    
    _8000("8000"),
    
    _9000("9000"),
    
    _9900("9900");

    private String value;

    IndustryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IndustryEnum fromValue(String value) {
      for (IndustryEnum b : IndustryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INDUSTRY = "industry";
  private IndustryEnum industry;

  /**
   * 01 &#x3D; 1 02 &#x3D; 2-5 03 &#x3D; 6-10 04 &#x3D; 11-19 05 &#x3D; 20-49 06 &#x3D; 50-99 07 &#x3D; 100+
   */
  public enum NumberOfEmployeesEnum {
    _01("01"),
    
    _02("02"),
    
    _03("03"),
    
    _04("04"),
    
    _05("05"),
    
    _06("06"),
    
    _07("07");

    private String value;

    NumberOfEmployeesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NumberOfEmployeesEnum fromValue(String value) {
      for (NumberOfEmployeesEnum b : NumberOfEmployeesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_NUMBER_OF_EMPLOYEES = "numberOfEmployees";
  private NumberOfEmployeesEnum numberOfEmployees;

  public static final String JSON_PROPERTY_SHIPMENT_INFORMATION = "shipmentInformation";
  private ShipmentInformation shipmentInformation;

  public static final String JSON_PROPERTY_SHIPPER_REQUIREMENTS = "shipperRequirements";
  private List<ShipperRequirementsInner> shipperRequirements = null;

  public static final String JSON_PROPERTY_IMPORT_BROKERAGE = "importBrokerage";
  private BusinessInformationImportBrokerage importBrokerage;

  public BusinessInformation() {
  }

  public BusinessInformation industry(IndustryEnum industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * 2000 &#x3D; Automotive 3000 &#x3D; High Tech 4000 &#x3D; Industrial Manufacturing &amp; Distribution 5000 &#x3D; Retail and Consumer Goods 6000 &#x3D; Professional Services 7000 &#x3D; Consumer Services 8000 &#x3D; Healthcare 9000 &#x3D; Government 9900 &#x3D; Other
   * @return industry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8000", value = "2000 = Automotive 3000 = High Tech 4000 = Industrial Manufacturing & Distribution 5000 = Retail and Consumer Goods 6000 = Professional Services 7000 = Consumer Services 8000 = Healthcare 9000 = Government 9900 = Other")
  @JsonProperty(JSON_PROPERTY_INDUSTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IndustryEnum getIndustry() {
    return industry;
  }


  @JsonProperty(JSON_PROPERTY_INDUSTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndustry(IndustryEnum industry) {
    this.industry = industry;
  }


  public BusinessInformation numberOfEmployees(NumberOfEmployeesEnum numberOfEmployees) {
    
    this.numberOfEmployees = numberOfEmployees;
    return this;
  }

   /**
   * 01 &#x3D; 1 02 &#x3D; 2-5 03 &#x3D; 6-10 04 &#x3D; 11-19 05 &#x3D; 20-49 06 &#x3D; 50-99 07 &#x3D; 100+
   * @return numberOfEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "06", value = "01 = 1 02 = 2-5 03 = 6-10 04 = 11-19 05 = 20-49 06 = 50-99 07 = 100+")
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_EMPLOYEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public NumberOfEmployeesEnum getNumberOfEmployees() {
    return numberOfEmployees;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_EMPLOYEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfEmployees(NumberOfEmployeesEnum numberOfEmployees) {
    this.numberOfEmployees = numberOfEmployees;
  }


  public BusinessInformation shipmentInformation(ShipmentInformation shipmentInformation) {
    
    this.shipmentInformation = shipmentInformation;
    return this;
  }

   /**
   * Get shipmentInformation
   * @return shipmentInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SHIPMENT_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShipmentInformation getShipmentInformation() {
    return shipmentInformation;
  }


  @JsonProperty(JSON_PROPERTY_SHIPMENT_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipmentInformation(ShipmentInformation shipmentInformation) {
    this.shipmentInformation = shipmentInformation;
  }


  public BusinessInformation shipperRequirements(List<ShipperRequirementsInner> shipperRequirements) {
    
    this.shipperRequirements = shipperRequirements;
    return this;
  }

  public BusinessInformation addShipperRequirementsItem(ShipperRequirementsInner shipperRequirementsItem) {
    if (this.shipperRequirements == null) {
      this.shipperRequirements = new ArrayList<>();
    }
    this.shipperRequirements.add(shipperRequirementsItem);
    return this;
  }

   /**
   * 
   * @return shipperRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SHIPPER_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ShipperRequirementsInner> getShipperRequirements() {
    return shipperRequirements;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPER_REQUIREMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipperRequirements(List<ShipperRequirementsInner> shipperRequirements) {
    this.shipperRequirements = shipperRequirements;
  }


  public BusinessInformation importBrokerage(BusinessInformationImportBrokerage importBrokerage) {
    
    this.importBrokerage = importBrokerage;
    return this;
  }

   /**
   * Get importBrokerage
   * @return importBrokerage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_IMPORT_BROKERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BusinessInformationImportBrokerage getImportBrokerage() {
    return importBrokerage;
  }


  @JsonProperty(JSON_PROPERTY_IMPORT_BROKERAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImportBrokerage(BusinessInformationImportBrokerage importBrokerage) {
    this.importBrokerage = importBrokerage;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessInformation businessInformation = (BusinessInformation) o;
    return Objects.equals(this.industry, businessInformation.industry) &&
        Objects.equals(this.numberOfEmployees, businessInformation.numberOfEmployees) &&
        Objects.equals(this.shipmentInformation, businessInformation.shipmentInformation) &&
        Objects.equals(this.shipperRequirements, businessInformation.shipperRequirements) &&
        Objects.equals(this.importBrokerage, businessInformation.importBrokerage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(industry, numberOfEmployees, shipmentInformation, shipperRequirements, importBrokerage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessInformation {\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    numberOfEmployees: ").append(toIndentedString(numberOfEmployees)).append("\n");
    sb.append("    shipmentInformation: ").append(toIndentedString(shipmentInformation)).append("\n");
    sb.append("    shipperRequirements: ").append(toIndentedString(shipperRequirements)).append("\n");
    sb.append("    importBrokerage: ").append(toIndentedString(importBrokerage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

