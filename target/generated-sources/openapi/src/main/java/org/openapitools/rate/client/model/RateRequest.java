/*
 * Rate
 * The Rating API is used when rating or shopping a shipment.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.rate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openapitools.rate.client.model.RateRequestCustomerClassification;
import org.openapitools.rate.client.model.RateRequestPickupType;
import org.openapitools.rate.client.model.RateRequestRequest;
import org.openapitools.rate.client.model.RateRequestShipment;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Rate Request container.  N/A
 */
@ApiModel(description = "Rate Request container.  N/A")
@JsonPropertyOrder({
  RateRequest.JSON_PROPERTY_REQUEST,
  RateRequest.JSON_PROPERTY_PICKUP_TYPE,
  RateRequest.JSON_PROPERTY_CUSTOMER_CLASSIFICATION,
  RateRequest.JSON_PROPERTY_SHIPMENT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-07T14:45:06.047821600-05:00[America/New_York]")
public class RateRequest {
  public static final String JSON_PROPERTY_REQUEST = "Request";
  private RateRequestRequest request;

  public static final String JSON_PROPERTY_PICKUP_TYPE = "PickupType";
  private RateRequestPickupType pickupType;

  public static final String JSON_PROPERTY_CUSTOMER_CLASSIFICATION = "CustomerClassification";
  private RateRequestCustomerClassification customerClassification;

  public static final String JSON_PROPERTY_SHIPMENT = "Shipment";
  private RateRequestShipment shipment;

  public RateRequest() {
  }

  public RateRequest request(RateRequestRequest request) {
    
    this.request = request;
    return this;
  }

   /**
   * Get request
   * @return request
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_REQUEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RateRequestRequest getRequest() {
    return request;
  }


  @JsonProperty(JSON_PROPERTY_REQUEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRequest(RateRequestRequest request) {
    this.request = request;
  }


  public RateRequest pickupType(RateRequestPickupType pickupType) {
    
    this.pickupType = pickupType;
    return this;
  }

   /**
   * Get pickupType
   * @return pickupType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_PICKUP_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RateRequestPickupType getPickupType() {
    return pickupType;
  }


  @JsonProperty(JSON_PROPERTY_PICKUP_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPickupType(RateRequestPickupType pickupType) {
    this.pickupType = pickupType;
  }


  public RateRequest customerClassification(RateRequestCustomerClassification customerClassification) {
    
    this.customerClassification = customerClassification;
    return this;
  }

   /**
   * Get customerClassification
   * @return customerClassification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CUSTOMER_CLASSIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RateRequestCustomerClassification getCustomerClassification() {
    return customerClassification;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_CLASSIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerClassification(RateRequestCustomerClassification customerClassification) {
    this.customerClassification = customerClassification;
  }


  public RateRequest shipment(RateRequestShipment shipment) {
    
    this.shipment = shipment;
    return this;
  }

   /**
   * Get shipment
   * @return shipment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SHIPMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RateRequestShipment getShipment() {
    return shipment;
  }


  @JsonProperty(JSON_PROPERTY_SHIPMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShipment(RateRequestShipment shipment) {
    this.shipment = shipment;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateRequest rateRequest = (RateRequest) o;
    return Objects.equals(this.request, rateRequest.request) &&
        Objects.equals(this.pickupType, rateRequest.pickupType) &&
        Objects.equals(this.customerClassification, rateRequest.customerClassification) &&
        Objects.equals(this.shipment, rateRequest.shipment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(request, pickupType, customerClassification, shipment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateRequest {\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    pickupType: ").append(toIndentedString(pickupType)).append("\n");
    sb.append("    customerClassification: ").append(toIndentedString(customerClassification)).append("\n");
    sb.append("    shipment: ").append(toIndentedString(shipment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

